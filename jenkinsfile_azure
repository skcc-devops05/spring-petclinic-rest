pipeline {
  agent none

  environment {
    REGISTRY_URL = 'https://devops05.koreacentral.cloudapp.azure.com'
    REGISTRY_CREDENTIALS = 'credential_harbor'
    APP_IMAGE = null
    IMAGE_REPO = 'repo-spring-petclinic-rest'
    IMAGE_NAME = 'spring-petclinic-rest'
    IMAGE_TAG = "TEST_${BUILD_NUMBER}"
    APP_URL = 'http://az-helm-petclinic.eastus.cloudapp.azure.com/petclinic'
    APP_PORT = 80
    PerfURL='az-helm-petclinic.eastus.cloudapp.azure.com'
    ArgoURL='52.224.202.5'
    argocdAppPrefix='az-helm-petclinic'
    appWaitTimeout = 600
  }

  stages {

    stage('Build') {
      agent {
        kubernetes {
          label 'petclinic-cd'
          yamlFile 'jenkins-agent-pod.yaml'
        }
      }
      steps {
        container('maven') {
          sh 'mvn clean compile'
        }
      }
    }

    stage('Unit Test') {
      agent {
        kubernetes {
          label 'petclinic-cd'
          yamlFile 'jenkins-agent-pod.yaml'
        }
      }
      steps {
        container('maven') {
          sh 'mvn test'
        }
      }
      post {
        always {
          junit 'target/surefire-reports/*.xml'
          step([ $class: 'JacocoPublisher' ])
        }
      }
    }

    stage('Static Code Analysis') {
      agent any
      steps {
        configFileProvider([configFile(fileId: 'maven-settings', variable: 'MAVEN_SETTINGS')]) {
          sh './mvnw sonar:sonar -s $MAVEN_SETTINGS'
        }
      }
    }
/*
    stage('Static Code Analysis') {
      agent {
        kubernetes {
          label 'petclinic-cd'
          yamlFile 'jenkins-agent-pod.yaml'
        }
      }
      steps {
        configFileProvider([configFile(fileId: 'maven-settings', variable: 'MAVEN_SETTINGS')]) {
          container('maven') {
            sh 'mvn sonar:sonar -s $MAVEN_SETTINGS'
          }
        }
      }
    }
*/
    stage('Package') {
      agent {
        kubernetes {
          label 'petclinic-cd'
          yamlFile 'jenkins-agent-pod.yaml'
        }
      }
      steps {
        container('maven') {
          sh 'mvn clean package -DskipTests'
          archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
        }
      }
    }

    stage('Build Docker image') {
      agent any
      steps {
        script {
          APP_IMAGE = docker.build("${IMAGE_REPO}/${IMAGE_NAME}:${IMAGE_TAG}")
        }
      }
    }

    stage('Push Docker image') {
      agent any
      steps {
        script {
          docker.withRegistry(REGISTRY_URL, REGISTRY_CREDENTIALS) {
            APP_IMAGE.push()
            APP_IMAGE.push('latest')
          }
        }
      }
    }

    stage('Update manifest') {
      agent any
      steps {
        sh """
          git config --global user.name 'skcc-devops05'
          git config --global user.email 'skcc-devops05@sk.com'
          git config --global credential.helper cache
          git config --global push.default simple
        """
        git url: 'https://github.com/skcc-devops05/az-helm-petclinic.git',
          credentialsId: 'credential_git',
          branch: 'main'
        sh """
          sed -i 's/tag:.*/tag: "${IMAGE_TAG}"/g' values.yaml
          git add values.yaml
          git commit -m 'Update Docker image tag: ${IMAGE_TAG}'
          git push origin main
        """
      }
    }

    stage('Argo'){
      agent {
        kubernetes {
          label 'petclinic-cd'
          yamlFile 'jenkins-agent-pod.yaml'
        }
      }
      steps {
        withCredentials([usernamePassword(credentialsId: 'credential_argocd', usernameVariable: 'ARGOCD_USER', passwordVariable: 'ARGOCD_AUTH_PWD')]) {
          container('argocd') {
            sh """
              yes | argocd login --insecure ${ArgoURL} --username ${ARGOCD_USER} --password ${ARGOCD_AUTH_PWD}
              argocd app sync ${argocdAppPrefix}
              argocd app wait ${argocdAppPrefix} --timeout ${appWaitTimeout}
              argocd logout ${ArgoURL}
              sleep 10
            """
          }
        }
      }
    }

    stage('Performance Test') {
      agent {
        kubernetes {
          label 'petclinic-cd'
          yamlFile 'jenkins-agent-pod.yaml'
        }
      }
      steps {
        withCredentials([usernamePassword(credentialsId: 'test', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PWD')]) {
          container('jmeter') {
            sh "git checkout origin/master"
            sh "git config remote.origin.url https://${GIT_USER}:${GIT_PWD}@github.com/skcc-devops05/spring-petclinic-rest.git"
            sh "git config --global user.email 'skcc.devops05@sk.com'"
            sh "git config --global user.name 'skcc-devops05'"
            echo 'jmeter 명령어 실행'
            sh """
              JVM_ARGS="-Xms1G -Xmx1G" && export JVM_ARGS && /usr/local/jmeter/apache-jmeter-5.4.1/bin/jmeter.sh \
                -n -f -t PerformanceTest/TS01_TC01_AWSPipeline.jmx -Jurl=${PerfURL} \
                -l PerformanceTest/TestResult/Result_${BUILD_NUMBER}.jtl \
                -e -o PerformanceTest/TestResult/Result_html_${BUILD_NUMBER}
                mv jmeter.log PerformanceTest/TestResult/Result_html_${BUILD_NUMBER}/jmeter.log
                git add . && git commit -m 'Publish Jmeter result' && git push origin HEAD:master
            """
          }
        }
      }
      post {
        always {
          perfReport 'PerformanceTest/TestResult/Result_${BUILD_NUMBER}.jtl'
        }
      }
    }

    stage('API Test') {
      agent {
        kubernetes {
          label 'petclinic-cd'
          yamlFile 'jenkins-agent-pod.yaml'
        }
      }
      steps {
        container('newman') {
          sh """
            newman run api_test.json \
                  --env-var 'baseUrl=${APP_URL}' --env-var 'petTypeId=""'\
                  --reporters cli,junit \
                  --reporter-junit-export 'petclinic-report.xml'
          """
        }
      }
      post {
        always {
          junit 'petclinic-report.xml'
        }
      }
    }

  }  /* stages */
}  /* pipeline */
