pipeline {
  agent {
    kubernetes {
      label 'petclinic-cd'
      yamlFile 'jenkins-agent-pod.yaml'
    }
  }

  environment {
    REGISTRY_URL = '13.125.176.176:8000'
    REGISTRY_CREDENTIALS = 'harbor-docker-registry'
    APP_IMAGE = null
    IMAGE_REPO = 'repo-spring-petclinic-rest'
    IMAGE_NAME = 'spring-petclinic-rest'
    IMAGE_TAG = sh(returnStdout: true, script: '(git rev-parse --short HEAD && echo "_$BUILD_NUMBER") | tr -d "\n"').trim()
    APP_URL = 'http://a2d2c96007a7540ac8d7272b63104582-e79675da07515235.elb.ap-northeast-2.amazonaws.com/petclinic'
    APP_PORT = 80
  }

  stages {
      stage('Build') {
      steps {
        container('maven') {
          sh 'mvn clean compile'
        }
      }
    }
    stage('Unit Test') {
      steps {
        container('maven') {
          sh 'mvn test'
        }
      }
      post {
        always {
          junit 'target/surefire-reports/*.xml'
          step([ $class: 'JacocoPublisher' ])
        }
      }
    }
    stage('Static Code Analysis') {
      steps {
        configFileProvider([configFile(fileId: 'maven-settings', variable: 'MAVEN_SETTINGS')]) {
          container('maven') {
            sh 'mvn sonar:sonar -s $MAVEN_SETTINGS'
          }
        }
      }
    }
    stage('Package') {
      steps {
        container('maven') {
          sh 'mvn clean package -DskipTests'
          archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
        }
      }
    }
    stage('Build Docker image') {
      steps {
        container('docker') {
          script {
            APP_IMAGE = docker.build("${IMAGE_REPO}/${IMAGE_NAME}:${IMAGE_TAG}")
          }
        }
      }
    }
    stage('Push Docker image') {
      steps {
        container('docker') {
          script {
            docker.withRegistry('http://' + REGISTRY_URL, REGISTRY_CREDENTIALS) {
              APP_IMAGE.push()
              APP_IMAGE.push('latest')
            }
          }
        }
      }
    }
    stage('Update manifest') {
      steps {
        sh """
          git config --global user.name 'skcc-devops05'
          git config --global user.email 'skcc-devops05@sk.com'
          git config --global credential.helper cache
          git config --global push.default simple
        """
          git url: 'https://github.com/skcc-devops05/petclinic-argocd-helm.git',
              credentialsId: 'test',
              branch: 'main'
        sh """
          sed -i 's/tag:.*/tag: ${IMAGE_TAG}/g' values.yaml
          git add values.yaml
          git commit -m 'Update Docker image tag: ${IMAGE_TAG}'
          git push origin main
        """
      }
    }
    stage('API Test') {
      steps {
        container('newman') {
          
          git url: 'https://github.com/skcc-devops05/spring-petclinic-rest.git',
                  credentialsId: 'test',
                    branch: 'master'
                    
          sh """
            newman run api_test.json \
                  --env-var 'baseUrl=${APP_URL}' --env-var 'petTypeId=""'\
                  --reporters cli,junit \
                  --reporter-junit-export 'petclinic-report.xml'
          """
        }
      }
      post {
        always {
          junit 'petclinic-report.xml'
        }
      }
    }
  }
}
